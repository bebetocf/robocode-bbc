package bbcTEAM

import bbcTEAM.*;
import robocode.*;
import robocode.ScannedRobotEvent;
import java.util.HashMap;

//global Map<String,EnemyRobot>mapTest = new HashMap<String,EnemyRobot>();

global HashMap<String,EnemyRobot> Enemies;

query "consult_actions"
  action: Action()
end



//
////// RULES
//
declare Target
	name: String
end

// Storing Robot status informations
declare Status
	scanDirection: int
	moveDirection: int
	found : int
end

// ========== CLEANING DOUBLE RULES ==========

rule "WHEN old action THEN clean it"
	salience 120
	when
		$action: Action($time: time)
		$state : RobotState()
		eval($time < $state.getTime())
	then
	    retract($action);
	    System.out.println("Rule from last turn cleaned.");
end


// ========== STATUS RULES ==========


rule "WHEN a victim dies retract victim"
	salience 119
	when
		$dead: RobotDeathEvent()
		$status: Status()
		$enemy: EnemyRobot(name==$dead.getName())
	then
		EnemyPos.remove($dead.getName());
	    $status.setFound($status.getFound()-1);
		retract($enemy);
end

rule "WHEN target dies, retract target"
	salience 118
	when
		
		$target: Target()
		not (exists EnemyRobot(name == $target.getName() ) )
	then
		retract($target);
end


rule "WHEN no status THEN create one"
	salience 100
	when
		not(exists Status())
		$status: RobotState()
	then
		Status status = new Status();
		status.setMoveDirection(1);
		status.setScanDirection(1);
		status.setFound(0);
	    insert(status);
	    System.out.println("Internal status created.");
end



// ========== VICTIM SET & UPDATE RULES ==========


rule "WHEN found a new victim, then update it."
	salience 89
	when
		$scanned: MessageEvent(name not contains "bbc.")
		$status : Status()
		$state: RobotState()
		not (exists EnemyRobot(name == $scanned.getName()))
	then
	    $status.setFound($status.getFound()+1);
	    EnemyRobot enemy = EnemyRobot($scanned,$state);
	    insert(enemy);
		
		GravitationalPoint p = new GravitationalPoint(enemy.getX(),enemy.getY(),$scanned.getEnergy());
		
		EnemyPos.put($scanned.getName(),p);
		
  		System.out.println("Victim created."+$scanned.getName());
end
rule "WHEN new turn and detected old victim THEN update victim's informations"
	salience 88
	when
		$scanned: MessageEvent(name not contains "bbc.")
		$status : Status()
		$state : RobotState()
		$enemy : EnemyRobot(name == $scanned.getName())
	then
		$enemy.print();
		$enemy.update( $scanned, $state );
		
		GravitationalPoint p = new GravitationalPoint($enemy.getX(),$enemy.getY(),$scanned.getEnergy());
		
		EnemyPos.put($scanned.getName(),p);
		
		System.out.println("Updated victim informations."+$scanned.getName());
end

rule "WHEN detected closer victim than old one THEN update to new victim"
	salience 87
   	when
   		$target : Target()

		$enemy1 : EnemyRobot(name == $target.getName())
		$enemy2 : EnemyRobot(name != $target.getName())
      	$status : Status()
      	$state : RobotState()
		eval($enemy2.isBetter($enemy1))
   	then
   		$target.setName($enemy2.getName());
   		update($target);
end

/*
rule "WHEN detected closer victim than old one THEN update to new victim"
	salience 87
   	when
		$victim : Victim()
      	$scanned: ScannedRobotEvent()
      	$status : Status()
      	$state : RobotState()
		eval($victim.getDistance() > $scanned.getDistance())
   	then
		$victim.setName($scanned.getName());
		$victim.setDistance($scanned.getDistance());
		$victim.setBearing($scanned.getBearing());
	    $victim.setHeading($scanned.getHeading());
	    $victim.setVelocity($scanned.getVelocity());
	    $victim.setEnergy($scanned.getEnergy());
		double enemyX = Helper.enemyX($status.getX(), $status.getHeading(), $scanned.getBearing(), $scanned.getDistance());
		double enemyY = Helper.enemyY($status.getY(), $status.getHeading(), $scanned.getBearing(), $scanned.getDistance());
		$victim.setX(enemyX);
		$victim.setY(enemyY);
		double firePower = Helper.firePower($scanned.getDistance());
		$victim.setFirePower(firePower);
		double bulletSpeed = Helper.bulletSpeed(firePower);
		$victim.setBulletSpeed(bulletSpeed);
		long time = Helper.time($scanned.getDistance(), bulletSpeed);
		$victim.setTime(time);
	    System.out.println("Closer victim detected and targetted");
end
*/

// ========== RADAR TURNING RULES ==========



// ========== AIMING RULES ==========

rule "WHEN exists victim THEN set gun to predicted position"
	salience 69
	when
		$enemy : EnemyRobot()
		$status : Status()
		$state : RobotState()
		Target(name==$enemy.getName())
	then
		double absDeg = Helper.absoluteBearing($state.getX(), $state.getY(), $enemy.getFutureX(), $enemy.getFutureY());
		//System.out.println("victim: angle="+ absDeg2 + " time = "+ time +" distance = "+ $victim.getDistance() +"\nenemy: angle=" + absDeg + " time = "+ $enemy.getTimeToTarget() + " distance = "+ $victim.getDistance());
		double finalAngle = Helper.normalizeBearing(absDeg - $state.getGunHeading());
		insert(new Action(Action.GUN_RIGHT, finalAngle, 1, $state.getTime()));
	    System.out.println("Victim's next position predicted, aiming.....");
end

// ========== SHOOTING RULES ==========

rule "WHEN gun is cool and on target THEN FIRE"
	salience 68
	when
		$target: Target()
		$state : RobotState()
		eval($state.getGunHeat() == 0.0)
		eval($state.getGunTurnRemaining() < 10)
		$enemy : EnemyRobot (name == $target.name)
	then
		insert(new Action(Action.SHOOT, $enemy.getFirePower(), 1, $state.getTime()));
	    insert(new Action(Action.SHOOT, $enemy.getFirePower(), 1, $state.getTime()));
	    
	    System.out.println("AND ..... FIIIIIIRRREEEEEEE");
end

// ========== MOVING RULES ==========

rule "WHEN no victim THEN random moves" // random moves based on "crazy" source
	salience 60
	when
		not(exists Victim())
		$state: RobotState()
		$status: Status()
	then
		insert(new Action(Action.AHEAD, 1000, 1, $state.getTime()));
		double angle = 360 * Math.random() - 180;
		insert(new Action(Action.TANK_RIGHT, angle, 1, $state.getTime()));
	    System.out.println("Random move initialized");
end

rule "WHEN stopped THEN switch move direction"
	salience 59
	when
		$state : RobotState()
		$status : Status()
		eval($status.getVelocity() == 0)
	then
		$status.setMoveDirection(-1 * $status.getMoveDirection());
		//$status.setVelocity(100);
	    System.out.println("Switch move direction.");
end

rule "WHEN 20 turns passed THEN switch move direction"
	salience 58
	when
		$state : RobotState()
		$status : Status()
		eval($status.getTime() % 20 == 0)
	then
		$status.setMoveDirection(-1 * $status.getMoveDirection());
	    System.out.println("Switch move direction.");
end

rule "WHEN victim is set THEN circling"
	salience 57
	when
		$victim: Victim()
		$status: Status()
		$state: RobotState()
		Target(name==$victim.getName())
	then
		double angle = Helper.normalizeBearing($victim.getBearing() + 90 - (15 * $status.getMoveDirection()));
		insert(new Action(Action.TANK_RIGHT, angle, 1, $state.getTime()));
		insert(new Action(Action.AHEAD, (1000 * $status.getMoveDirection()), 1, $state.getTime()));
	    System.out.println("Circling");
end
