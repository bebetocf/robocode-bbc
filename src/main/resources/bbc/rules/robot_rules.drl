package bbc

import bbc.*;
import robocode.*;
import robocode.ScannedRobotEvent;
import java.util.HashMap;
import java.awt.geom.Point2D;
import java.util.Set;

global HashMap<String,GravitationalPoint> EnemyPos;

//global Map<String,EnemyRobot>mapTest = new HashMap<String,EnemyRobot>();

query "consult_actions"
  action: Action()
end



//
////// RULES
//

declare Target
	name: String
end

// Storing Robot status informations
declare Status
	scanDirection: int
	moveDirection: int
	found : int
end




// ========== CLEANING DOUBLE RULES ==========

rule "WHEN old action THEN clean it"
	salience 120
	when
		$action: Action($time: time)
		$state : RobotState()
		eval($time < $state.getTime())
	then
	    retract($action);
	    System.out.println("Rule from last turn cleaned.");
end


// ========== STATUS RULES ==========

rule "WHEN a victim dies retract victim"
	salience 119
	when
		$dead: RobotDeathEvent()
		$status: Status()
		$enemy: EnemyRobot(name==$dead.getName())
	then
		EnemyPos.remove($dead.getName());
	    $status.setFound($status.getFound()-1);
		retract($enemy);
end

rule "WHEN a friend dies retract victim"
	salience 119
	when
		$dead: RobotDeathEvent()
		$status: Status()
		not exists ($enemy: EnemyRobot(name==$dead.getName()))
	then
		EnemyPos.remove($dead.getName());
end

rule "WHEN target dies, retract target"
	salience 118
	when
		
		$target: Target()
		not (exists EnemyRobot(name == $target.getName() ) )
	then
		retract($target);
end






rule "WHEN no status THEN create one"
	salience 100
	when
		not(exists Status())
		$status: RobotState()
	then
		Status status = new Status();
		status.setMoveDirection(1);
		status.setScanDirection(1);
		status.setFound(0);
	    insert(status);
	    System.out.println("Internal status created.");
end

// ========== VICTIM SET & UPDATE RULES ==========

rule "WHEN found a new victim, then update it."
	salience 89
	when
		$scanned: ScannedRobotEvent(name not contains "bbc.")
		$status : Status()
		$state: RobotState()
		not (exists EnemyRobot(name == $scanned.getName()))
	then
	    $status.setFound($status.getFound()+1);
	    EnemyRobot enemy = new EnemyRobot($scanned,$state);
	    insert(enemy);
		
		GravitationalPoint p = new GravitationalPoint(enemy.getX(),enemy.getY(),$scanned.getEnergy());
		
		EnemyPos.put($scanned.getName(),p);
		
  		System.out.println("Victim created."+$scanned.getName());
end

rule "WHEN found a new friend, add it to the Hash"
	salience 89
	when
		$scanned: ScannedRobotEvent(name contains "bbc.")
		$status : Status()
		$state: RobotState()
		not (exists EnemyRobot(name == $scanned.getName()))
	then
		double enemyX = Helper.enemyX($state.getX(), $state.getHeading(), $scanned.getBearing(), $scanned.getDistance());
		double enemyY = Helper.enemyY($state.getY(), $state.getHeading(), $scanned.getBearing(), $scanned.getDistance());
		
		GravitationalPoint p = new GravitationalPoint(enemyX,enemyY,$scanned.getEnergy());
		
		EnemyPos.put($scanned.getName(),p);
		
  		System.out.println("Victim created."+$scanned.getName());
end

rule "WHEN new turn and detected old victim THEN update victim's informations"
	salience 88
	when
		$scanned: ScannedRobotEvent(name not contains "bbc.")
		$status : Status()
		$state : RobotState()
		$enemy : EnemyRobot(name == $scanned.getName())
	then
		$enemy.print();
		$enemy.update( $scanned, $state );
		
		GravitationalPoint p = new GravitationalPoint($enemy.getX(),$enemy.getY(),$scanned.getEnergy());
		
		EnemyPos.put($scanned.getName(),p);
		
		System.out.println("Updated victim informations."+$scanned.getName());
end

rule "WHEN new turn and detected old friend THEN update friend's informations"
	salience 88
	when
		$scanned: ScannedRobotEvent(name contains "bbc.")
		$status : Status()
		$state : RobotState()
		$enemy : EnemyRobot(name == $scanned.getName())
	then
		
		double enemyX = Helper.enemyX($state.getX(), $state.getHeading(), $scanned.getBearing(), $scanned.getDistance());
		double enemyY = Helper.enemyY($state.getY(), $state.getHeading(), $scanned.getBearing(), $scanned.getDistance());
		
		GravitationalPoint p = new GravitationalPoint(enemyX,enemyY,$scanned.getEnergy());
		
		EnemyPos.put($scanned.getName(),p);
		
		System.out.println("Updated victim informations."+$scanned.getName());
end

rule "WHEN new turn there is no target and there is a victim, create new target"
	salience 88
	when
		not (exists Target())
		$enemy : EnemyRobot()
	then
		Target target = new Target();
		target.setName($enemy.getName());
		insert(target);
  		System.out.println("Victim target = "+$enemy.getName());
end



rule "WHEN detected closer victim than old one THEN update to new victim"
	salience 87
   	when
   		$target : Target()

		$enemy1 : EnemyRobot(name == $target.getName())
		$enemy2 : EnemyRobot(name != $target.getName())
      	$status : Status()
      	$state : RobotState()
		eval($enemy2.isBetter($enemy1))
   	then
   		$target.setName($enemy2.getName());
   		update($target);
end

// ========== RADAR TURNING RULES ==========

rule "WHEN there is a robot that is hasnt been scaned in a while"
	salience 81
	when
		$state : RobotState()
		$status : Status()
		$enemy : EnemyRobot(time<($state.getTime()-16) )
	then

		insert(new Action(Action.RADAR_RIGHT, 360*$status.getScanDirection(), 1, $state.getTime()));
		System.out.println("Removed old victim and set direction to:" +  $status.getScanDirection());
end

rule "WHEN missing robot then complete turn"
	salience 80
	when
		$state : RobotState()
		$status : Status()
		eval($status.getFound() < $state.getOthers())  
	then
		insert(new Action(Action.RADAR_RIGHT, 360* $status.getScanDirection(), 1, $state.getTime()));
		
		System.out.println("Radar complete turn initialized"+ ($status.getFound() < $state.getOthers()) );
end

rule "WHEN scanned victim THEN oscillate radar on it"
	salience 79
	when
		$scanned : ScannedRobotEvent()
		$status : Status()
		$state : RobotState()
		Target(name==$scanned.getName())
		not (eval($status.getFound() < $state.getOthers()) or (exists EnemyRobot(time<($state.getTime()-16) )) ) 
	then
		$status.setScanDirection(-1 * $status.getScanDirection());
		insert(new Action(Action.RADAR_RIGHT, 360 * $status.getScanDirection(), 1, $state.getTime()));
	    System.out.println("Oscillate on :"+ $scanned.getName());
end


// ========== AIMING RULES ==========

rule "WHEN exists victim THEN set gun to predicted position"
	salience 69
	when
		$enemy : EnemyRobot()
		$status : Status()
		$state : RobotState()
		Target(name==$enemy.getName())
	then
		double absDeg = Helper.absoluteBearing($state.getX(), $state.getY(), $enemy.getFutureX(), $enemy.getFutureY());
		//System.out.println("victim: angle="+ absDeg2 + " time = "+ time +" distance = "+ $victim.getDistance() +"\nenemy: angle=" + absDeg + " time = "+ $enemy.getTimeToTarget() + " distance = "+ $victim.getDistance());
		double finalAngle = Helper.normalizeBearing(absDeg - $state.getGunHeading());
		insert(new Action(Action.GUN_RIGHT, finalAngle, 1, $state.getTime()));
	    System.out.println("Victim's next position predicted, aiming.....");
end

// ========== SHOOTING RULES ==========

rule "WHEN gun is cool and on target THEN FIRE"
	salience 68
	when
		$target: Target()
		$state : RobotState()
		eval($state.getGunHeat() == 0.0)
		eval($state.getGunTurnRemaining() < 10)
		$enemy : EnemyRobot (name == $target.name)
	then
		insert(new Action(Action.SHOOT, $enemy.getFirePower(), 1, $state.getTime()));
	    insert(new Action(Action.SHOOT, $enemy.getFirePower(), 1, $state.getTime()));
	    
	    System.out.println("AND ..... FIIIIIIRRREEEEEEE");
end

// ========== MOVING RULES ==========

//Função para a movimentação

rule "Robot moves according with gravitational rules"
	salience 60
	when
		$state : RobotState()
		$status : Status()
		$battlestate: BattleState()
		eval($state.getTime() % 11 == 0)
	then
		
		double xforce = 0;
    	double yforce = 0;
    	double dist = 300;
    	double force = 0;
    	double ang = 0;
    	
    	double posx = 0;
    	double posy = 0;
	    
	    if (!(EnemyPos.isEmpty())) {
		   	Set<String> x = EnemyPos.keySet();
		   	
		   	for (String s : x) {
		   		GravitationalPoint p = (GravitationalPoint)EnemyPos.get(s);
		   		force = p.power/Math.pow(Helper.distance($state.getX(),$state.getY(),p.x,p.y),2);
	        	ang = Helper.normalizeBearing(Math.PI/2 - Math.atan2($state.getY() - p.y, $state.getX() - p.x)); 
	        	xforce += Math.sin(ang) * force;
	        	yforce += Math.cos(ang) * force;
		   	}
		}
	    	
	   	xforce += 5000/Math.pow(Helper.distance($state.getX(), $state.getY(), $battlestate.getFieldWidth(), $state.getY()), 3);
	   	xforce -= 5000/Math.pow(Helper.distance($state.getX(), $state.getY(), 0, $state.getY()), 3);
	   	yforce += 5000/Math.pow(Helper.distance($state.getX(), $state.getY(), $state.getX(), $battlestate.getFieldHeight()), 3);
	   	yforce -= 5000/Math.pow(Helper.distance($state.getX(), $state.getY(), $state.getX(), 0), 3);
		
		posx = $state.getX() - xforce;
		posy = $state.getY() - yforce;
		
		double angle = Math.toDegrees(Helper.absoluteAngle($state.getX(),$state.getY(),posx,posy));
		angle = Helper.RobotAngleForGravitationalPoints ($state.getHeading(), angle);
		
		double r = Helper.DirectionforTheRobot (angle);
		angle = Helper.RobotAngleModifiedForGravitationalPoints (angle);
		
		insert(new Action(Action.TANK_LEFT, angle, 1, $state.getTime() + 7));
		insert(new Action(Action.AHEAD, dist*r, 1, $state.getTime() + 7));
		
		System.out.println("Moving initialized");

end